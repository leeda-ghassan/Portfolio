[
    {
        "label": "AutoModelForCausalLM",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "GPT2FlaskApp",
        "importPath": "src.gpt_services.gpt",
        "description": "src.gpt_services.gpt",
        "isExtraImport": true,
        "detail": "src.gpt_services.gpt",
        "documentation": {}
    },
    {
        "label": "GPT2FlaskApp",
        "kind": 6,
        "importPath": "src.gpt_services.gpt",
        "description": "src.gpt_services.gpt",
        "peekOfCode": "class GPT2FlaskApp:\n    def __init__(self, model_name=\"openai-community/gpt2\", device=-1):\n        \"\"\"\n        Initialize GPT-2 model and tokenizer.\n        \"\"\"\n        self.model_name = model_name\n        self.device = device\n        self._load_model()\n    def _load_model(self):\n        \"\"\"",
        "detail": "src.gpt_services.gpt",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    data = None\n    if request.method == \"POST\":\n        first_name = request.form.get(\"first_name\", \"Osama\")\n        last_name = request.form.get(\"last_name\", \"Yousef\")\n        job_title = request.form.get(\"job_title\", \"Backend\")\n        # Generate CV summary\n        data = gpt_service.generate_cv_entry(\n            name=f\"{first_name} {last_name}\",\n            age=25,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "gpt_service",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "gpt_service = GPT2FlaskApp()\napp = Flask(__name__)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    data = None\n    if request.method == \"POST\":\n        first_name = request.form.get(\"first_name\", \"Osama\")\n        last_name = request.form.get(\"last_name\", \"Yousef\")\n        job_title = request.form.get(\"job_title\", \"Backend\")\n        # Generate CV summary",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    data = None\n    if request.method == \"POST\":\n        first_name = request.form.get(\"first_name\", \"Osama\")\n        last_name = request.form.get(\"last_name\", \"Yousef\")\n        job_title = request.form.get(\"job_title\", \"Backend\")\n        # Generate CV summary\n        data = gpt_service.generate_cv_entry(",
        "detail": "app",
        "documentation": {}
    }
]